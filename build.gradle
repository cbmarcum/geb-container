/* build with:
* make sure to use java 21 and groovy 4.0
* ./gradlew publish (this pushed to nexus staging repo also)
* nexus-plugin docs say to use:
* ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
* or:
* ./gradlew publishToSonatype closeSonatypeStagingRepository
*
* * publish manually at:
* https://central.sonatype.com/publishing
* or to publish locally
* ./gradlew publishToMavenLocal
*
* to update this wrapper version
* $ gradle wrapper --gradle-version 8.5 --distribution-type all
*
* publish manually at:
* https://central.sonatype.com/publishing
*
* TODO: jreleaser
*  https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_portal_publisher_api
*/

plugins {

    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'maven-publish'
    id 'signing'
    // https://plugins.gradle.org/plugin/io.github.gradle-nexus.publish-plugin
    // https://github.com/gradle-nexus/publish-plugin
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"


}

version = '0.4.0'
group = 'net.codebuilders'
archivesBaseName = 'geb-container'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots
    // isReleaseVersion = true  // to force signing

    // The drivers we want to use in containers
    // see https://github.com/SeleniumHQ/docker-selenium
    // for browsers per platform
    // drivers = ["firefox", "chrome", "edge"] // no safari container
    drivers = ["firefox"]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// add integration tests
sourceSets {
    integrationTest {
        groovy {
            srcDirs = ['src/integration-test/groovy']
        }
        resources {
            srcDirs = ['src/integration-test/resources']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}


/* see gradle/<module>.versions.toml for coordinates and versions
   implementation is used internally, and not exposed to consumers on their own compile classpath.
   api is exported to consumers, that is to say found on their compile classpath.
*/
dependencies {
    implementation libs.groovy

    api libs.geb.spock

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    api libs.testcontainers.selenium
    api libs.selenium.chrome.driver
    api libs.selenium.firefox.driver
    api libs.selenium.edge.driver
    api libs.selenium.chromium.driver
    api libs.selenium.remote.driver

    implementation libs.selenium.support

    implementation "org.slf4j:slf4j-api:2.0.17"
    implementation "org.slf4j:slf4j-simple:2.0.17"

    // Added to be able to resolve the geb version from the BOM in the resolveVersions task
    compileOnly 'org.gebish:geb-spock'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'

    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

groovydoc {
    docTitle = "Geb Container API"
    header = "Code Builders, LLC" // doesn't seem to work
    footer = "Generated documentation ${version}"
    windowTitle = docTitle
    use = true // create class and package usage pages
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test


}

tasks.named("integrationTest") {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    systemProperty('geb.env', System.getProperty('geb.env'))
    systemProperty('grails.geb.recording.mode', 'RECORD_ALL') // also RECORD_FAILING
    systemProperty('grails.geb.browser.type', 'firefox') // also chrome and edge
    // systemProperty('grails.geb.recording.restartPerTest', 'false') // makes all recording the same

}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        testLogging {
            events 'passed', 'skipped', 'failed'
        }

        systemProperty('grails.geb.recording.mode', 'RECORD_ALL') // also RECORD_FAILING
        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver
    }
}

integrationTest {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

check.dependsOn integrationTest

tasks.withType(Test).configureEach {
    outputs.upToDateWhen { false } // always run tests
    useJUnitPlatform()
}

// publishing and signing
// guide: https://docs.gradle.org/current/userguide/publishing_setup.html
// ref: https://github.com/cbmarcum/mybusiness/blob/master/build.gradle

publishing {
    publications {
        myLibrary(MavenPublication) {
            artifactId = 'geb-container'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Geb Container API'
                packaging = 'jar'
                description = 'A library for using Testcontainers with Apache Geb'
                url = 'http://codebuilders.net'
                inceptionYear = '2025'

                scm {
                    url = 'https://github.com/cbmarcum/geb-container'
                    developerConnection = 'https://github.com/cbmarcum/geb-container'
                    connection = 'https://github.com/cbmarcum/geb-container'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Carl Marcum'
                        email = 'carl.marcum@codebuilders.net'
                        url = 'https://codebuilders.net'
                        organization = 'Code Builders, LLC'
                        organizationUrl = 'https://codebuilders.net'

                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = layout.buildDirectory.dir("repo")
        }

    }

}

signing {
    sign publishing.publications.myLibrary
}

// https://plugins.gradle.org/plugin/io.github.gradle-nexus.publish-plugin
// https://github.com/gradle-nexus/publish-plugin
// currently not working
// see https://github.com/gradle-nexus/publish-plugin/issues/221
nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            // nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            // snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}
